import aiosmtplib, logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from email.message import EmailMessage
from config1 import SMTP_USER, SMTP_PASSWORD, token
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import asyncio



inline_button = [
     [InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="message")],
     [InlineKeyboardButton(text="–ê—É–¥–∏–æ", callback_data="audio")],
     [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="picture")],
     [InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data="video")]
]

inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)



SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SMTP_USER = SMTP_USER
SMTP_PASSWORD = SMTP_PASSWORD

logging.basicConfig(level=logging.DEBUG)
bot = Bot(token=token)
dp = Dispatcher()

async def send_email(to_emain, message_body):
    message = EmailMessage()
    message.set_content(message_body)
    message['Subject'] = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞'
    message['From'] = SMTP_USER
    message['To'] = to_emain

    try:
        logging.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ {to_emain}')
        await aiosmtplib.send(
            message,
            hostname=SMTP_SERVER,
            port=SMTP_PORT,
            start_tls=True,
            username=SMTP_USER,
            password=SMTP_PASSWORD
        )
        logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logging.info("–û—à–∏–±–∫–∞", e)

user_email = None

@dp.message(CommandStart())
async def start(message:types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π emailüì´. \n–í–≤–µ–¥–∏—Ç–µ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ –∏–ª–∏ –∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚ú®.")

@dp.message(lambda message: "@gmail.com" in message.text)
async def email(message:types.Message):
    global user_email 
    user_email = message.text
    await message.answer(f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–¥—Ä–µ—Å {user_email}. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /variants, —á—Ç–æ–±—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–µüôåüôå")

@dp.message(Command('variants'))
async def keyboard(message:types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=inline_keyboard)


@dp.callback_query(F.data == 'message')
async def cmd_message(callback: types.CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—åüì´.')
@dp.message()
async def get_message(message: types.Message):
    email_message = message.text 
    global user_email
    if user_email:
        await send_email(user_email, email_message) 
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!üôå")
    else:
        await message.answer("–û—à–∏–±–∫–∞: email –Ω–µ —É–∫–∞–∑–∞–Ω‚ùå.")

@dp.callback_query(F.data == 'audio')
async def cmd_audio(callback: types.CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å(–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–æ–π)üì´.')

@dp.message()
async def get_audio(message: types.Message):
    email_message = message.audio 
    global user_email
    if user_email:
        await send_email(user_email, email_message)
        await message.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!üôå")
    else:
        await message.answer("–û—à–∏–±–∫–∞: email –Ω–µ —É–∫–∞–∑–∞–Ω‚ùå.")

@dp.callback_query(F.data == 'picture')
async def cmd_picture(callback: types.CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å(–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–æ–π)üì´.')

@dp.message()
async def get_picture(message: types.Message):
    email_message = message.photo
    global user_email
    if user_email:
        await send_email(user_email, email_message)
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!üôå")
    else:
        await message.answer("–û—à–∏–±–∫–∞: email –Ω–µ —É–∫–∞–∑–∞–Ω‚ùå.")

@dp.callback_query(F.data == 'video')
async def cmd_video(callback: types.CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å(–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–æ–π)üì´.')

@dp.message()
async def get_video(message: types.Message):
    email_message = message.video
    global user_email
    if user_email:
        await send_email(user_email, email_message) 
        await message.answer("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!üôå")
    else:
        await message.answer("–û—à–∏–±–∫–∞: email –Ω–µ —É–∫–∞–∑–∞–Ω‚ùå.")

@dp.message(lambda message: '@' not in message.text)
async def error(message:types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã")

async def main():
        await dp.start_polling(bot)

if __name__=='__main__':
    try:
         asyncio.run(main())
    except KeyboardInterrupt:
        print('–í—ã—Ö–æ–¥')


